package org.apache.hadoop.hdfs.job;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.hdfs.job.framework.Const;
import org.apache.hadoop.hdfs.job.framework.Tools;
import org.apache.hadoop.hdfs.protocol.Block;
import org.apache.hadoop.hdfs.protocol.ClientDatanodeProtocol;
import org.apache.hadoop.hdfs.protocol.ClientProtocol;
import org.apache.hadoop.hdfs.protocol.LocatedBlocks;
import org.cProc.GernralRead.TableAndIndexTool.TableAndIndexTool;
import org.cProc.query.readFile.ReadAndFilterFromLocalDiskThread;
import org.cProc.sql.RowFilter;

import com.dinglicom.decode.bean.BssapCDR;




public class FileUtils {
	public static final Log LOG = LogFactory.getLog(FileUtils.class.getName());
	public static final Map<String, Boolean> FLAG = new HashMap<String, Boolean>();
	private static final Configuration conf = new Configuration();
	//private static ClientProtocol namenode = null;
	private static String confPath = null;
	//public static final AtomicInteger integer = new AtomicInteger(0);

	//private static ClientDatanodeProtocol datanode = null;
	static {
		Properties props = new Properties();
		Configuration conf = new Configuration();
		String confUrl = conf.get("dfs.hadoop.conf");
		confPath = confUrl+"/hdfs-site.xml";
		try {
			props.load(FileUtils.class.getClassLoader().getResourceAsStream("CFS.properties"));
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		String fsurl = props.getProperty("namenodeIp");
		
		String pre = props.getProperty("pre");
		if(pre==null)
			pre="";
		TableAndIndexTool.setPrePath(pre);
		System.out.println("pre---------------------------------------------->"+pre);
		//LOG.info("ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss,fsUrl:"+fsurl);
		//InetSocketAddress nameNodeAddr = NetUtils.createSocketAddr(fsurl, 9000);
		//InetSocketAddress dataNodeAddr = NetUtils.createSocketAddr("127.0.0.1",50020);
//		try {
//			namenode = (ClientProtocol) RPC.getProxy(ClientProtocol.class,
//					ClientProtocol.versionID, nameNodeAddr, conf, NetUtils
//							.getSocketFactory(conf, ClientProtocol.class));
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//
//		try {
//			datanode = (ClientDatanodeProtocol) RPC.getProxy(
//					ClientDatanodeProtocol.class,
//					ClientDatanodeProtocol.versionID, dataNodeAddr, conf,
//					NetUtils.getSocketFactory(conf,
//							ClientDatanodeProtocol.class));
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}

	private FileUtils() {
	}

	public static ArrayList lisPathcontent(ClientProtocol nameNode,ClientDatanodeProtocol dataNode,String dirs, String sessionId,
			Configuration conf) throws IOException, InterruptedException {
		String dataioIp = conf.get(Const.DATAIO_IP);
		String sql = conf.get("cProc.cdrSQL");
		int tableType = Integer.parseInt(conf.get("cProc.table.type"));
		boolean reslut = Boolean.parseBoolean(conf.get("cProc.sourceFilter"));
		 LOG.info("result-------------------------->"+reslut);
		// LOG.info("sql------------->"+sql);

		Integer condition = new Integer(0);
		String hfdsPath = conf.get("cProc.hdfs");
		conf.set("fs.default.name", hfdsPath);
		FileSystem fs = FileSystem.get(conf);
		
		RowFilter rf = new RowFilter(sql, fs);
		
		
		ArrayList<ReadAndFilterFromLocalDiskThread> threadList = ReadAndFilterFromLocalDiskThread.InitReadThread(confPath, rf.getDataSize(), condition, reslut,rf);


		ArrayList<String> infoList = new ArrayList<String>();
		// LOG.info("1111");
		String[] outArr = dirs.split("#");
		// LOG.info(" outArr.length : " + outArr.length);
		if (outArr == null || outArr.length == 0)
			return infoList;
		String[] paths = new String[outArr.length];
		String[] offsetsArr = new String[outArr.length];

		//
		
		
		//int g = 0;
		for (int _i = 0; _i < outArr.length; _i++) {
			String[] temp = outArr[_i].split(" ");
			paths[_i] = temp[0];
			offsetsArr[_i] = temp[1];
			//g += offsetsArr[_i].split(",").length;
		}
		

		long start = System.currentTimeMillis();
		LocatedBlocks[] lbArr = nameNode.getBlockLocationsForMutilFile(paths,
				0, 777);
		Block[] blocks = new Block[lbArr.length];
		for (int i = 0; i < lbArr.length; i++) {
			blocks[i] = lbArr[i].getLocatedBlocks().get(0).getBlock();
			// LOG.info(paths[i]+"--"+blocks[i].getBlockName());
		}
		LOG.info("do search cw cost--->"+(System.currentTimeMillis()-start)/1000);
		String[] abPath = dataNode.getBlockFiles(blocks);
		// LOG.info(Server.IP+" total file " +abPath.length);
		// LOG.info("55555 " + abPath.length);
		List<String> invalidPath = new ArrayList<String>();
		List<Integer> invaliOffset  = new ArrayList<Integer>();
		

		for (int oi = 0; oi < abPath.length; oi++) {
			if(abPath[oi].equals("false"))
			{
				invalidPath.add(paths[oi]);
				invaliOffset.add(oi);
				LOG.warn("download from hdfs------>"+paths[oi]);
				continue;
			}
			for (int i = 0; i < threadList.size(); i++) {
				//
				//LOG.info("hdfspath****************************>"+paths[oi]+"    fuck local--->"+abPath[oi]+"    offset---->"+offsetsArr[oi]);
				threadList.get(i).addReadIndex(abPath[oi], offsetsArr[oi]);
			}
		}
		for (int i = 0; i < threadList.size(); i++) {
			Thread thread = new Thread(threadList.get(i));
			thread.start();
		}

		List<byte[]> reslutDataFromMainThread = new ArrayList<byte[]>();
		
		
		
	
		

		
		
		while (!ReadAndFilterFromLocalDiskThread.ThreadsIsOver(threadList)) {
			synchronized (condition) {
				try {
					if (!ReadAndFilterFromLocalDiskThread.ThreadsIsOver(threadList)) {
						condition.wait(6000);
						for (int _i = 0; _i < threadList.size(); _i++) {
							threadList.get(_i).getResultData(reslutDataFromMainThread);
						}
						for (int j = 0; j < reslutDataFromMainThread.size(); j++) {
							List<String> listStr = JavaToJson.getCDRValue(reslutDataFromMainThread.get(j), tableType);
							if(!listStr.isEmpty())
								infoList.add(listStr.get(0));
							if (infoList.size() >= Const.DEFAULT_SEND_MAX) {
								LOG.info("infoList size is " + infoList.size());
								Server.ChatProtocolHandler.send2tomcat(infoList, sessionId,dataioIp);
								infoList.clear();
							}
						}
						reslutDataFromMainThread.clear();
					}
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		LOG.info("infoList size is " + infoList.size());
		

		Server.ChatProtocolHandler.send2tomcat(infoList, sessionId,dataioIp);
		infoList.clear();
		reslutDataFromMainThread.clear();
		//
		if(!invalidPath.isEmpty())
		{
			List<File> inValidToPath = new ArrayList<File>(invalidPath.size());
			//下载到本地,必须下载到hdfs的一个挂载盘
			String disks = conf.get("dfs.data.dir");
			String[] offsets = disks.split(",");
			String pre = "/";
			if(offsets!=null && offsets.length>0)
			{
				pre = offsets[0].trim();
			}
			disks = null;
			offsets = null;
			
			for(String tempPath:invalidPath)
			{
				File file = new File(pre+java.io.File.pathSeparator+java.util.UUID.randomUUID().toString());
				Tools.downloadFromHdfs(tempPath, file.getAbsolutePath(), fs);
				inValidToPath.add(file);
			}
			
			//
			ArrayList<ReadAndFilterFromLocalDiskThread> inValidthreadList = ReadAndFilterFromLocalDiskThread.InitReadThread(confPath, rf.getDataSize(), condition, reslut,rf);
			for (int oi = 0; oi < inValidToPath.size(); oi++) {
				for (int i = 0; i < inValidthreadList.size(); i++) {
					inValidthreadList.get(i).addReadIndex(inValidToPath.get(oi).getAbsolutePath(), offsetsArr[invaliOffset.get(oi)]);
				}
			}
			for (int i = 0; i < inValidthreadList.size(); i++) {
				Thread thread = new Thread(inValidthreadList.get(i));
				thread.start();
			}
			//TODO
			while (!ReadAndFilterFromLocalDiskThread.ThreadsIsOver(inValidthreadList)) {
				synchronized (condition) {
					try {
						if (!ReadAndFilterFromLocalDiskThread.ThreadsIsOver(inValidthreadList)) {
							condition.wait(6000);
							for (int _i = 0; _i < inValidthreadList.size(); _i++) {
								inValidthreadList.get(_i).getResultData(reslutDataFromMainThread);
							}
							for (int j = 0; j < reslutDataFromMainThread.size(); j++) {
								List<String> listStr = JavaToJson.getCDRValue(reslutDataFromMainThread.get(j), tableType);
								if(!listStr.isEmpty())
									infoList.add(listStr.get(0));
								if (infoList.size() >= Const.DEFAULT_SEND_MAX) {
									LOG.info("infoList size is " + infoList.size());
									Server.ChatProtocolHandler.send2tomcat(infoList, sessionId,dataioIp);
									infoList.clear();
								}
							}
							reslutDataFromMainThread.clear();
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			
			for(File file:inValidToPath)
			{
				file.delete();
			}
			
		}
		Server.ChatProtocolHandler.send2tomcat(infoList, sessionId,dataioIp);
		if(threadList!=null)
			threadList.clear();
		threadList = null;
		return infoList;

	}

//	public static void send2tomcat(List listValue, String sessionId)
//			throws HttpException, IOException {
//		if(listValue==null || listValue.isEmpty())
//			return;
//		// LOG.info(Server.IP + " start send:" + new Date().getTime());
//		// HttpClient httpClient = new HttpClient();
//		// String info = JSON.toJSONString(list).toString();
//		// String para = "?sessionID=" + sessionId + "&count=" + list.size()
//		// + "&infoLength=" + info.length();
//		// PostMethod postMethod = new PostMethod(Server.serverURL + para);
//		//
//		// ByteArrayInputStream byteInputStream = new ByteArrayInputStream(info
//		// .getBytes());
//		//
//		// postMethod.setRequestBody(byteInputStream);
//		//
//		// int statusCode = httpClient.executeMethod(postMethod);
//		// LOG.infoln(" send out" + new Date().getTime());
//		// send2Mem(list,sessionId);
//		send2Hdfs(listValue, sessionId);
//	}

//	public static void send2Server(List listValue, String sessionId) throws FileNotFoundException, IOException{
//		LOG.info("first value is"+listValue.get(0));
//		ClientService clientService = new ClientService("init.properties");
//		clientService.sendMessageToServer(listValue, sessionId);
//	}
	
//	public static void send2Mem(List listValue, String sessionId)
//			throws IOException {
//
//		SpyMemcacheWrapper memcache = new SpyMemcacheWrapper();
//		String info = JSON.toJSONString(listValue).toString();
//		LOG.info("To Mem Data  Length :" + listValue.size());
//		InetSocketAddress address = new InetSocketAddress("192.168.1.22", 12000);
//		InetSocketAddress address2 = new InetSocketAddress("192.168.1.20",12000);
//		List<InetSocketAddress> list = new LinkedList<InetSocketAddress>();
//		list.add(address);
//		list.add(address2);
//		memcache.init(list);
//		memcache.set(sessionId, 100000, info);
//		Configuration conf = new Configuration();
//		FileSystem fs = FileSystem.get(URI.create("hdfs://cstortest:9000"),
//				conf);
//		FSDataOutputStream writer = null;
//		boolean isExist = fs.exists(new Path("hdfs://cstortest:9000/"
//				+ getHostIP.getLocalIP() + "size.txt"));
//		if (!isExist) {
//			writer = fs.create(new Path("hdfs://cstortest:9000/"
//					+ getHostIP.getLocalIP() + "size.txt"));
//		} else {
//			writer = fs.append(new Path("hdfs://cstortest:9000/"
//					+ getHostIP.getLocalIP() + "size.txt"));
//		}
//		writer.write((listValue.size() + "\r\n").getBytes());
//		writer.flush();
//		writer.close();
//		memcache.destroy();
//	}

//	public static void send2Hdfs(List listValue, String sessionId)throws IOException {
//		LOG.info("----------------begin to send to hdfs----------------------------");
//		if(listValue.size()==0) {
//			return ;
//		}
//	    Configuration conf = new Configuration();
//		String localSysIp = getHostIP.getLocalIP();
//		localSysIp = localSysIp.substring(localSysIp.lastIndexOf(".")+1);
//		String hdfsPath = conf.get("fs.default.name");
//	    String resultPath = hdfsPath+"/result/";
//	    FileSystem fs = FileSystem.get(URI.create(resultPath), conf);
//	    boolean resultExsit = fs.exists(new Path(resultPath));
//	    if(!resultExsit){
//	    	fs.mkdirs(new Path(resultPath));
//	    }
//	    boolean dirExsit = fs.exists(new Path(resultPath+sessionId));
//	    if(!dirExsit){
//	    	fs.mkdirs(new Path(resultPath+sessionId));
//	    }
//
//	    boolean hostDirExsit = fs.exists(new Path(resultPath+sessionId+"/"+localSysIp));
//	    if(!hostDirExsit){
//	    	fs.mkdirs(new Path(resultPath+sessionId+"/"+localSysIp));
//	    }
//	    FileStatus [] status = fs.listStatus(new Path(resultPath+sessionId+"/"+localSysIp+"/"));
//	    LOG.info("input list value length +_+! :"+listValue.size());
//	    LOG.info("first data is +_+! :"+listValue.get(0));
//	    if(status == null || status.length==0){
//	    	String fileName = "/"+UUID.randomUUID()+".temp";
//	    	File file = new File(fileName);
//	    	if(!file.exists()){
//	    		file.createNewFile();
//	    	}
//	    	BufferedWriter writer = new BufferedWriter(new FileWriter(file));
//	    	for(int i=0;i<listValue.size();i++){
//	    		writer.write(listValue.get(i).toString());
//	    		writer.newLine();
//	    	}
//	    	writer.flush();
//	    	writer.close();
//	     fs.copyFromLocalFile(new Path(fileName), new Path(resultPath+sessionId+"/"+localSysIp));
//	     boolean flag = false;
//    	 int fileNameIndex = 1;
//	     while(!flag){	
//	           flag = fs.rename(new Path(resultPath+sessionId+"/"+localSysIp+fileName), new Path(resultPath+sessionId+"/"+localSysIp+"/"+fileNameIndex));
//	           fileNameIndex++;
//	     }
//	     fs.close();
//	    }else{
//	    	int max = 0;
//	    	for(int i=0;i<status.length;i++){
//	    		String fileName = status[i].getPath().getName();
//	    		if(fileName.contains(".")){
//	    			continue ;
//	    		}
//	    		int index = Integer.parseInt(fileName);
//	    		if(index>max){
//	    			max = index;
//	    		}
//	    	}
//	    	max ++;
//	    	String fileName = "/"+UUID.randomUUID()+".temp";
//	    	File file = new File(fileName);
//	    	if(!file.exists()){
//	    		file.createNewFile();
//	    	}
//	    	BufferedWriter writer = new BufferedWriter(new FileWriter(file));
//	    	for(int i=0;i<listValue.size();i++){
//	    		writer.write(listValue.get(i).toString());
//	    		writer.newLine();
//	    	}
//	    	writer.flush();
//	    	writer.close();
//	    	fs.copyFromLocalFile(new Path(fileName), new Path(resultPath+sessionId+"/"+localSysIp));
//		     boolean flag = false;
//	    	 int fileNameIndex = max;
//		     while(!flag){	
//		           flag = fs.rename(new Path(resultPath+sessionId+"/"+localSysIp+fileName), new Path(resultPath+sessionId+"/"+localSysIp+"/"+fileNameIndex));
//		           fileNameIndex++;
//		     }
//	    }
//		LOG.info("----------------end to send to hdfs----------------------------");
//	}

	/**
	 * @param args
	 * @throws IOException
	 */

}
